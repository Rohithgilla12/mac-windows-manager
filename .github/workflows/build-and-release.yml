name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-release:
    runs-on: macos-latest
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '5.10'
    
    - name: Import Code-Signing Certificates
      uses: apple-actions/import-codesign-certs@v3
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
    
    - name: Build and Sign
      env:
        CERTIFICATE_NAME: ${{ secrets.CERTIFICATE_NAME }}
      run: |
        echo "Building the project..."
        swift build -c release
        echo "Moving binary to current directory..."
        mv .build/release/mwm ./mwm
        
        echo "Creating entitlements file..."
        cat << EOF > entitlements.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
          <true/>
        </dict>
        </plist>
        EOF
        
        echo "Listing available signing identities..."
        security find-identity -v -p codesigning
        
        echo "Attempting to sign the binary..."
        /usr/bin/codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION }}" --options runtime --entitlements entitlements.plist -v ./mwm
        
        echo "Verifying code signature..."
        /usr/bin/codesign -dv --verbose=4 ./mwm

    - name: Notarize
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        echo "Creating ZIP for notarization..."
        ditto -c -k --keepParent ./mwm mwm.zip
        
        echo "Submitting for notarization..."
        xcrun notarytool submit mwm.zip --wait --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID" --output-format json > notarization_result.json
        
        echo "Notarization result:"
        cat notarization_result.json
        
        if grep -q "success" notarization_result.json; then
          echo "Notarization successful, stapling ticket..."
          xcrun stapler staple ./mwm
          echo "Verifying stapled binary..."
          spctl --assess -vv ./mwm
        else
          echo "Notarization failed. Check the output above for details."
          exit 1
        fi

    - name: Check Notarization Status
      run: |
        echo "Checking notarization status..."
        xcrun notarytool info ./mwm --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_ID_PASSWORD }}" --team-id "${{ secrets.TEAM_ID }}"
    
    - name: Generate SHA256
      run: shasum -a 256 mwm > mwm.sha256
    
    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          mwm
          mwm.sha256
        generate_release_notes: true